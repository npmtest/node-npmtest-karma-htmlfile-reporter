{"/home/travis/build/npmtest/node-npmtest-karma-htmlfile-reporter/test.js":"/* istanbul instrument in package npmtest_karma_htmlfile_reporter */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-karma-htmlfile-reporter/lib.npmtest_karma_htmlfile_reporter.js":"/* istanbul instrument in package npmtest_karma_htmlfile_reporter */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_karma_htmlfile_reporter = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_karma_htmlfile_reporter = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-karma-htmlfile-reporter/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-karma-htmlfile-reporter && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_karma_htmlfile_reporter */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_karma_htmlfile_reporter\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_karma_htmlfile_reporter.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_karma_htmlfile_reporter.rollup.js'] =\n            local.assetsDict['/assets.npmtest_karma_htmlfile_reporter.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_karma_htmlfile_reporter.__dirname + '/lib.npmtest_karma_htmlfile_reporter.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-karma-htmlfile-reporter/node_modules/karma-htmlfile-reporter/index.js":"var os = require('os');\r\nvar path = require('path');\r\nvar fs = require('fs');\r\nvar builder = require('xmlbuilder');\r\n\r\nvar HTMLReporter = function(baseReporterDecorator, config, emitter, logger, helper, formatError) {\r\n  var outputFile = config.htmlReporter.outputFile;\r\n  var pageTitle = config.htmlReporter.pageTitle || 'Unit Test Results';\r\n  var subPageTitle = config.htmlReporter.subPageTitle || false;\r\n  var groupSuites = config.htmlReporter.groupSuites || false;\r\n  var useLegacyStyle = config.htmlReporter.useLegacyStyle || false;\r\n  var useCompactStyle = config.htmlReporter.useCompactStyle || false;\r\n  var log = logger.create('reporter.html');\r\n\r\n  var html;\r\n  var body;\r\n  var suites;\r\n  var htmlCreated = false;\r\n  var lastSuiteName;\r\n  var pendingFileWritings = 0;\r\n  var fileWritingFinished = function() {};\r\n  var allMessages = [];\r\n  var allErrors = [];\r\n\r\n  baseReporterDecorator(this);\r\n\r\n  // TODO: remove if public version of this method is available\r\n  var basePathResolve = function(relativePath) {\r\n\r\n    if (helper.isUrlAbsolute(relativePath)) {\r\n      return relativePath;\r\n    }\r\n\r\n    if (!helper.isDefined(config.basePath) || !helper.isDefined(relativePath)) {\r\n      return '';\r\n    }\r\n\r\n    return path.resolve(config.basePath, relativePath);\r\n  };\r\n\r\n  var htmlHelpers = {\r\n    createHead: function() {\r\n      var head = html.ele('head');\r\n      head.ele('meta', {charset: 'utf-8'});\r\n      head.ele('title', {}, pageTitle + (subPageTitle ? ' - ' + subPageTitle : ''));\r\n      head.ele('style', {type: 'text/css'}, 'html,body{font-family:Arial,sans-serif;font-size:1rem;margin:0;padding:0;}body{padding:10px 40px;}h1{margin-bottom:0;}h2{margin-top:0;margin-bottom:0;color:#999;}table{width:100%;margin-top:20px;margin-bottom:20px;table-layout:fixed;}tr.header{background:#ddd;font-weight:bold;border-bottom:none;}td{padding:7px;border-top:none;border-left:1px black solid;border-bottom:1px black solid;border-right:none;word-break:break-all;word-wrap:break-word;}tr.pass td{color:#003b07;background:#86e191;}tr.skip td{color:#7d3a00;background:#ffd24a;}tr.fail td{color:#5e0e00;background:#ff9c8a;}tr:first-child td{border-top:1px black solid;}td:last-child{border-right:1px black solid;}tr.overview{font-weight:bold;color:#777;}tr.overview td{padding-bottom:0px;border-bottom:none;}tr.system-out td{color:#777;}tr.system-errors td{color:#f00;}hr{height:2px;margin:30px 0;background:#000;border:none;}section{margin-top:40px;}h3{margin:6px 0;}.overview{color:#333;font-weight:bold;}.system-out{margin:0.4rem 0;}.system-errors{color:#a94442}.spec{padding:0.8rem;margin:0.3rem 0;}.spec--pass{color:#3c763d;background-color:#dff0d8;border:1px solid #d6e9c6;}.spec--skip{color:#8a6d3b;background-color:#fcf8e3;border:1px solid #faebcc;}.spec--fail{color:#a94442;background-color:#f2dede;border:1px solid #ebccd1;}.spec--group{color:#636363;background-color:#f0f0f0;border:1px solid #e6e6e6;margin:0;}.spec--group:not(:first-of-type){margin:20px 0 0 0;}.spec__title{display:inline;}.spec__suite{display:inline;}.spec__descrip{font-weight:normal;}.spec__status{float:right;}.spec__log{padding-left: 2.3rem;}.hidden{display:none;}body.compact .spec p{margin-top:0;margin-bottom:0.5rem;}body.compact .spec,body.compact tr,body.compact .overview,body.compact .system-out,body.compact .system-errors{font-size:0.85rem;}body.compact .spec{padding:0.3rem 0.5rem;}body.compact section{margin-top:30px;}');\r\n    },\r\n    createBody: function() {\r\n      body = html.ele('body', {class:useCompactStyle ? 'compact' : ''});\r\n      body.ele('h1', {}, pageTitle);\r\n\r\n      if (subPageTitle) {\r\n        body.ele('h2', {}, subPageTitle);\r\n      }\r\n    }\r\n  };\r\n\r\n  var createHtmlResults = function(browser) {\r\n    var suite;\r\n    var header;\r\n    var overview;\r\n    var timestamp = (new Date()).toLocaleString();\r\n\r\n    if (useLegacyStyle) {\r\n      suite = suites[browser.id] = body.ele('table', {cellspacing:'0', cellpadding:'0', border:'0'});\r\n      suite.ele('tr', {class:'overview'}).ele('td', {colspan:'3', title:browser.fullName}, 'Browser: ' + browser.name);\r\n      suite.ele('tr', {class:'overview'}).ele('td', {colspan:'3'}, 'Timestamp: ' + timestamp);\r\n      suites[browser.id]['results'] = suite.ele('tr').ele('td', {colspan:'3'});\r\n\r\n      header = suite.ele('tr', {class:'header'});\r\n      header.ele('td', {}, 'Status');\r\n      header.ele('td', {}, 'Spec');\r\n      header.ele('td', {}, 'Suite / Results');\r\n\r\n      body.ele('hr');\r\n    } else {\r\n      suite = suites[browser.id] = body.ele('section', {});\r\n      overview = suite.ele('header', {class:'overview'});\r\n\r\n      // Assemble the Overview\r\n      overview.ele('div', {class:'browser'}, 'Browser: ' + browser.name);\r\n      overview.ele('div', {class:'timestamp'}, 'Timestamp: ' + timestamp);\r\n\r\n      // Create paragraph tag for test results to be placed in later\r\n      suites[browser.id]['results'] = overview.ele('p', {class:'results'});\r\n    }\r\n  };\r\n\r\n  var initializeHtmlForBrowser = function(browser) {\r\n    if (!htmlCreated) {\r\n      html = builder.create('html', null, 'html', { headless: true });\r\n\r\n      html.doctype();\r\n\r\n      htmlHelpers.createHead();\r\n      htmlHelpers.createBody();\r\n\r\n      htmlCreated = true;\r\n    }\r\n  };\r\n\r\n  this.adapters = [function(msg) {\r\n    allMessages.push(msg);\r\n  }];\r\n\r\n  this.onRunStart = function(browsers) {\r\n    suites = {};\r\n    browsers.forEach(initializeHtmlForBrowser);\r\n  };\r\n\r\n  this.onBrowserStart = function(browser) {\r\n    initializeHtmlForBrowser(browser);\r\n    createHtmlResults(browser);\r\n  };\r\n\r\n  this.onBrowserError = function(browser, error) {\r\n    initializeHtmlForBrowser(browser);\r\n    createHtmlResults(browser);\r\n\tallErrors.push(formatError(error));\r\n  };\r\n\r\n  this.onBrowserComplete = function(browser) {\r\n    var suite = suites[browser.id];\r\n    var result = browser.lastResult;\r\n\r\n    if (suite && suite['results']) {\r\n      suite['results'].txt(result.total + ' tests / ');\r\n      suite['results'].txt((result.disconnected || result.error ? 1 : 0) + ' errors / ');\r\n      suite['results'].txt(result.failed + ' failures / ');\r\n      suite['results'].txt(result.skipped + ' skipped / ');\r\n      suite['results'].txt('runtime: ' + ((result.netTime || 0) / 1000) + 's');\r\n\r\n      if (allMessages.length > 0) {\r\n        if (useLegacyStyle) {\r\n          suite.ele('tr', {class:'system-out'}).ele('td', {colspan:'3'}).raw('<strong>System output:</strong><br />' + allMessages.join('<br />'));\r\n        } else {\r\n          suite.ele('div', {class:'system-out'}).raw('<strong>System output:</strong><br />' + allMessages.join('<br />'));\r\n        }\r\n\r\n        allMessages = [];\r\n      }\r\n\r\n      if (allErrors.length > 0) {\r\n        if (useLegacyStyle) {\r\n          suite.ele('tr', {class:'system-errors'}).ele('td', {colspan:'3'}).raw('<strong>Errors:</strong><br />' + allErrors.join('<br />'));\r\n        } else {\r\n          suite.ele('div', {class:'system-errors'}).raw('<strong>Errors:</strong><br />' + allErrors.join('<br />'));\r\n        }\r\n\r\n        allErrors = [];\r\n      }\r\n    }\r\n\r\n    suites[browser.id] = null;\r\n  };\r\n\r\n  this.onRunComplete = function(browsers) {\r\n    var htmlToOutput = html;\r\n\r\n    if (htmlToOutput) {\r\n      pendingFileWritings++;\r\n\r\n      config.basePath = path.resolve(config.basePath || '.');\r\n      outputFile = basePathResolve(outputFile);\r\n      helper.normalizeWinPath(outputFile);\r\n\r\n      helper.mkdirIfNotExists(path.dirname(outputFile), function() {\r\n        fs.writeFile(outputFile, htmlToOutput.end({pretty: true}), function(err) {\r\n          if (err) {\r\n            log.warn('Cannot write HTML report\\n\\t' + err.message);\r\n          } else {\r\n            log.debug('HTML results written to \"%s\".', outputFile);\r\n          }\r\n\r\n          if (!--pendingFileWritings) {\r\n            fileWritingFinished();\r\n          }\r\n        });\r\n      });\r\n    } else {\r\n      log.error('HTML report was not created\\n\\t');\r\n    }\r\n\r\n    html = null;\r\n    allMessages.length = 0;\r\n    allErrors.length = 0;\r\n    htmlCreated = false;\r\n  };\r\n\r\n  this.specSuccess = this.specSkipped = this.specFailure = function(browser, result) {\r\n    var currentSuite = result.suite;\r\n\tvar suiteName = currentSuite.concat();\r\n    var currentSuiteName = currentSuite[0];\r\n\tvar isNewSuite = false;\r\n    var specClass = result.skipped ? 'skip' : (result.success ? 'pass' : 'fail');\r\n    var specStatus = result.skipped ? 'Skipped' : (result.success ? ('Passed in ' + ((result.time || 0) / 1000) + 's') : 'Failed');\r\n    var spec;\r\n    var specGroup;\r\n    var specHeader;\r\n    var specTitle;\r\n    var suiteColumn;\r\n\r\n    if (lastSuiteName !== currentSuiteName) {\r\n      isNewSuite = true;\r\n      lastSuiteName = currentSuiteName;\r\n    }\r\n\r\n    if (currentSuite.length > 1) {\r\n\t  suiteName.shift();\r\n    }\r\n\r\n    if (useLegacyStyle) {\r\n      spec = suites[browser.id].ele('tr', {class:specClass});\r\n      spec.ele('td', {}, specStatus);\r\n      spec.ele('td', {}, result.description);\r\n      suiteColumn = spec.ele('td', {}).raw(currentSuite.join(' &raquo; '));\r\n    } else {\r\n      if (groupSuites && isNewSuite) {\r\n        specGroup = suites[browser.id].ele('div', {class: 'spec spec--group'});\r\n        specGroup.ele('h3', {class:'spec__header'}).raw(currentSuiteName);\r\n      }\r\n\r\n      spec = suites[browser.id].ele('div', {class: 'spec spec--' + specClass, style: (groupSuites ? ('margin-left:' + ((currentSuite.length - 1) * 20) + 'px;') : '')});\r\n\r\n      // Create spec header\r\n      specHeader = spec.ele('h3', {class:'spec__header'});\r\n\r\n      // Assemble the spec title\r\n      specTitle = specHeader.ele('div', {class:'spec__title'});\r\n      specTitle.ele('p', {class:'spec__suite' + (groupSuites ? ((suiteName[0] !== currentSuiteName || suiteName.length > 1) ? '' : ' hidden') : '')}).raw(suiteName.join(' &raquo; '));\r\n\r\n      specTitle.ele('em',  {class:'spec__descrip'}, result.description);\r\n\r\n      // Display spec result\r\n      specHeader.ele('div', {class:'spec__status'}, specStatus);\r\n    }\r\n\r\n    if (!result.success) {\r\n      if (useLegacyStyle) {\r\n        result.log.forEach(function(err) {\r\n          suiteColumn.raw('<br />' + formatError(err).replace(/</g,'&lt;').replace(/>/g,'&gt;'));\r\n        });\r\n      } else {\r\n        // Error Messages\r\n        suiteColumn = spec.ele('p', {class:'spec__log'});\r\n\r\n\t\tresult.log.forEach(function(err, index) {\r\n           var message = (index === 0) ? '' : '<br />';\r\n           message += formatError(err).replace(/</g,'&lt;').replace(/>/g,'&gt;').replace(/(?:\\r\\n|\\r|\\n)/g, '<br />');\r\n           suiteColumn.raw(message);\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  // wait for writing all the html files, before exiting\r\n  this.onExit = function (done) {\r\n    if (pendingFileWritings) {\r\n      fileWritingFinished = done;\r\n    } else {\r\n      done();\r\n    }\r\n  };\r\n};\r\n\r\nHTMLReporter.prototype._repeat = function(n, str) {\r\n  var res = [];\r\n  var i;\r\n  for (i = 0; i < n; ++i) {\r\n    res.push(str);\r\n  }\r\n  return res.join('');\r\n};\r\n\r\nHTMLReporter.$inject = ['baseReporterDecorator', 'config', 'emitter', 'logger', 'helper', 'formatError'];\r\n\r\n// PUBLISH DI MODULE\r\nmodule.exports = {\r\n  'reporter:html': ['type', HTMLReporter]\r\n};\r\n"}